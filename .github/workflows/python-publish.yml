name: Publish to PyPI
on:
    push:
        tags:
            - 'v*'  # Trigger on version tags

jobs:
    test:
        runs-on: ubuntu-22.04
        strategy:
            matrix:
                python-version: ['3.7', '3.8', '3.9', '3.10', '3.11', '3.12']
        
        name: Test on Python ${{ matrix.python-version }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            - name: Get version into setup.py
              id: get_version
              run: |
                VERSION=$(echo "${GITHUB_REF#refs/tags/}")
                echo "VERSION=$VERSION" >> $GITHUB_ENV
    
            - name: Update version in setup.py
              run: |
                  echo "Using version: $VERSION"
                  sed -i "s/version=\"__VERSION__\"/version=\"$VERSION\"/" setup.py

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install build twine
                  pip install -e .[dev]

            - name: Run tests
              run: |
                  pytest -v tests/

    publish:
        runs-on: ubuntu-latest
        needs: test
        if: startsWith(github.ref, 'refs/tags/v')
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python 3.11
              uses: actions/setup-python@v4
              with:
                  python-version: 3.11

            - name: Get version into setup.py
              id: get_version
              run: |
                  VERSION=$(echo "${GITHUB_REF#refs/tags/}")
                  echo "VERSION=$VERSION" >> $GITHUB_ENV

            - name: Update version in setup.py
              run: |
                  echo "Using version: $VERSION"
                  sed -i "s/version=\"__VERSION__\"/version=\"$VERSION\"/" setup.py

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install build twine

            - name: Build package
              run: |
                  python -m build

            - name: Publish to PyPI
              env:
                  TWINE_USERNAME: __token__
                  TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
              run: |
                  twine upload dist/*
